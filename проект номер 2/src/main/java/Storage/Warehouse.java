package Storage;
import java.util.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Scanner;

public class Warehouse extends Storage{
    static Scanner scan = new Scanner(System.in);
    
    List<Dealer> dealers;
    @Override
    public String toString() {
        return "Warehouse{" +
                "products=" + products +
                '}';
    }

    public void purchase() throws IOException {
        Path filePath = Path.of("/Users/danilzabinskij/IdeaProjects/demo/untitled2/root.json");///Users/danilzabinskij/IdeaProjects/demo/untitled2/root.json
        String content = Files.readString(filePath); //C:/Users/core i5 9400/IdeaProjects/untitled2/root.json
        dealers = JsonParser.parseJson(content);//—á—Ç–æ–± –¥–∏–ª–ª–µ—Ä –±—ã–ª–æ –ø–æ–ª–µ–º

        boolean continueShopping = true;
        do{
            System.out.println("\n===–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–£–ü–ö–ï –¢–û–í–ê–†–û–í===");
            int temper;
            for (int i = 0; i < 8; i++) {
                int z = i+1;
                System.out.println(z + ") " + dealers.get(i).name);
            }

            System.out.println("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤—à–∏–∫–∞ : ");
            temper = scan.nextInt();
            switch (temper){
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                    for (int i = 0; i < dealers.get(temper-1).getProducts().size(); i++) {
                        int z = i+1;
                        System.out.println(z + ") " + dealers.get(temper-1).getProducts().get(i).toString());
                    }
                    break;
                default:
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    break;
            }
            System.out.println("–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞: ");
            int temp = 0;
            String response;
            boolean flag = true;
            do {
                int product = scan.nextInt() - 1;

                int productSize = dealers.get(temper-1).getProducts().get(product).size;
                if (getCapacity() >= productSize) {
                    products.add(dealers.get(temper-1).getProducts().get(temper-1));
                    setCapacity(getCapacity() - productSize);
                    System.out.println("–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ: " + getCapacity());
                } else {
                    System.out.println("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞");
                    flag = false;
                    break;
                }

                System.out.println("–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Ç—å –∑–∞–∫—É–ø–∫—É?");
                response = scan.next();
            } while (response.equalsIgnoreCase("–¥–∞") && flag);

            System.out.println("ŒîŒú√ò≈á«§ ·ªÆ≈û ‡∂û" + "üìú" + "\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞==============");
            System.out.println(products.toString());

            System.out.println("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É —É –¥—Ä—É–≥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞? (–¥–∞/–Ω–µ—Ç)");
            String continueResponse = scan.next();
            if (continueResponse.equalsIgnoreCase("–¥–∞")){
                continueShopping = true;
            }else{
                continueShopping = false;
            }
        }while (continueShopping);
    }



    public boolean filling(int temler, int product){
        int temp = dealers.get(temler - 1).getProducts().get(product - 1).size;
        if(getCapacity() > getFill() + temp){
            return true;
        }else{
            return false;
        }
    }

    public void swapResponsiblePerson(Warehouse warehouse){
        String id = getIdResponsiblePerson();
        setIdResponsiblePerson(warehouse.getIdResponsiblePerson());
        warehouse.setIdResponsiblePerson(id);
    }




}
